" Niru Maheswaranathan
" ~/.vimrc file
let os = substitute(system('uname'), "\n", "", "")

" Vim Plugins ------------------------- {{{

call plug#begin('~/.vim/plugged')

" navigation
Plug 'kien/ctrlp.vim'

" git
Plug 'airblade/vim-gitgutter'
Plug 'vim-scripts/gitignore'

" testing
Plug 'janko-m/vim-test'

" colors
Plug 'flazz/vim-colorschemes'

" send code to tmux
Plug 'jpalardy/vim-slime'

" documentation
Plug 'Keithbsmiley/investigate.vim'

" surround text easily
Plug 'tpope/vim-surround'

" easily comment code
Plug 'scrooloose/nerdcommenter'

" show vertical line indent marks
Plug 'Yggdroot/indentLine'

" automatically close quotes and parenthesis
Plug 'Townk/vim-autoclose'

" syntax checking
Plug 'scrooloose/syntastic'

" copy/paste
Plug 'maxbrunsfeld/vim-yankstack'

" code alignment
Plug 'godlygeek/tabular'

" expand visual selection region
Plug 'terryma/vim-expand-region'

" snippets and tab completion
Plug 'ervandew/supertab'
Plug 'Valloric/YouCompleteMe', { 'do': './install.sh' }
Plug 'sirver/ultisnips'

" javascript
Plug 'jelera/vim-javascript-syntax'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'leshill/vim-json'
Plug 'moll/vim-node'

" HTML and CSS
Plug 'ap/vim-css-color'
Plug 'mattn/emmet-vim'
Plug 'vim-scripts/closetag.vim'

" python
Plug 'klen/python-mode'

" haskell
Plug 'raichoo/haskell-vim'

" julia
Plug 'JuliaLang/julia-vim'

" matlab
Plug 'djoshea/vim-matlab-fold'

" less
Plug 'groenewege/vim-less'

" editor
Plug 'bling/vim-airline'
Plug 'ryanoasis/vim-devicons'

call plug#end()

" }}}

" Basic Settings ---------------------- {{{

syntax on                 " Enable syntax highlighting
filetype plugin indent on " Enable filetype-specific indenting and plugins
let mapleader = ";"       " map leader

set ofu=syntaxcomplete#Complete         " omnicomplete
let g:SuperTabDefaultCompletionType = "context"
set nocompatible                        " prevents vim from emulating vi's bugs
set autoindent                          " automatic indenting
set smartindent                         " smart indenting
set tabstop=4                           " tab length (columns)
set shiftwidth=2                        " tab length with reindent options (columns)
set expandtab                           " tab inserts spaces in insert mode
set smarttab                            " smart tabs
set et                                  " appropriate tab spacing
set showmatch                           " match brackets
set guioptions-=T                       " turn off gui toolbar
set guioptions-=m                       " turn off gui menu
set noerrorbells                        " turn off error bells
set visualbell                          " turn on visual bell
set ruler                               " each window gets status line
set history=500		                    " keep 500 lines of command line history
set foldlevelstart=1                    " fold automatically
set lazyredraw                          " redraw only when we need to
set wildmenu                            " tab completion when file browsing
set wildignore+=*.png,*.jpg,*.pdf       " ignore certain files
set title                               " set vim title
set nohls                               " no highlights on search
set incsearch                           " search as you type
set nobackup                            " no backup files
set nowritebackup                       " only in case you don't want a backup file while editing
set noswapfile                          " no swap files
set autoread                            " auto read when file is changed externally
set number                              " show line numbers
set scrolloff=10                        " scroll buffer
set encoding=utf-8                      " file encoding
set cmdheight=1                         " command bar height
set laststatus=2                        " always show the status line
set formatoptions-=or                   " Don't add the comment prefix when I hit enter or o/O on a comment line.
set showcmd		                        " display incomplete commands
set gdefault                            " assume the /g flag on :s substitutions to replace all matches in a line
set undofile                            " generates .un file so undo/redo work even after saving
set ttyfast                             " faster drawing
set noesckeys                           " kills function and cursor keys
set clipboard=unnamed                   " support the Mac OSX clipboard
set cpo+=J                              " two-spacing after sentences
set iskeyword-=_                        " Use _ as a word-separator
set timeoutlen=500                      " Don't wait so long for the next keypress
set tags=./tags;                        " Set the tag file search order

" backspace config
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" ignore case when searching, set default to replace on all lines
set ignorecase
set smartcase
set gdefault


" }}}

" Vimscript file settings ---------------------- {{{

augroup filetype_vim
    autocmd!
    autocmd FileType vim,zsh setlocal foldmethod=marker
augroup END

" editing and sourcing vimrc
noremap <Leader>erc :tabf ~/.vimrc<CR>
noremap <Leader>src :source ~/.vimrc<CR>

" }}}

" Navigation ---------------------- {{{

" dealing with windows
noremap <Leader>j <C-w>j<CR>
noremap <Leader>k <C-w>k<CR>
noremap <Leader>l <C-w>l<CR>
noremap <Leader>h <C-w>h<CR>
noremap <Leader>x <C-w>c<CR>

" uses expression to extract path from current file's path
noremap <Leader>e :e <C-R>=expand("%:p:h") . '/'<CR>
noremap <Leader>t :tabf <C-R>=expand("%:p:h") . '/'<CR>
noremap <Leader>s :split <C-R>=expand("%:p:h") . '/'<CR>
noremap <Leader>v :vnew <C-R>=expand("%:p:h") . '/'<CR>
noremap <Leader>q :q<CR>

" get current director
function! CurDir()
    let curdir = substitute(getcwd(), '/Users/nirum/', "~/", "g")
    return curdir
endfunction

" jumping around
nnoremap <CR> G
nnoremap <BS> gg

" Fuzzy finder: ignore stuff that can't be opened, and generated files
let g:fuzzy_ignore = "*.png;*.PNG;*.JPG;*.jpg;*.GIF;*.gif;vendor/**;coverage/**;tmp/**;rdoc/**"

" }}}

" Plugins ---------------------- {{{

" vim-airline (statusline)
let g:airline_powerline_fonts = 1
let g:airline_theme='molokai'
let g:airline#extensions#tabline#enabled = 1

" ctrl-p (CtrlP)
" make ctrl-P faster in git repos
let g:ctrlp_map = '<c-t>'
let g:ctrlp_use_caching = 0
if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor

    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
else
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
  let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<space>', '<cr>', '<2-LeftMouse>'],
    \ }
endif

" map comment commands (NERD Commenter)
map <Leader>mm <Leader>c<space>

" syntastic
let g:syntastic_enable_signs=0
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq = 0
map <Leader>S :SyntasticToggleMode<CR>
map <silent> <Leader>E :Errors<CR>

" indented line marker color
let g:indentLine_color_gui = '#A7C0CC'

" python-mode (pymode)
let g:pymode_lint_todo_symbol = '✎'
let g:pymode_lint_comment_symbol = '➯'
let g:pymode_lint_visual_symbol = 'RR'
let g:pymode_lint_error_symbol = '✗✗'
let g:pymode_lint_info_symbol = 'II'
let g:pymode_lint_pyflakes_symbol = 'FF'
let g:pymode_rope = 0
let g:pymode_lint_on_write = 1
map <c-e> :PymodeLint<CR>

" vim-slime
let g:slime_target = "tmux"

" (YCM) YouCompleteMe
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_key_list_select_completion=['<C-j>', '<Down>']
let g:ycm_key_list_previous_completion=['<C-p>', '<Up>']

" supertab
let g:SuperTabDefaultCompletionType = '<C-j>'

" ultisnips snippets
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnpsSnippetsDir = '~/.vim/UltiSnips'
let g:UltiSnipsExpandTrigger="<C-CR>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" expand region
vmap v <Plug>(expand_region_expand)
vmap <s-v> <Plug>(expand_region_shrink)

" dash
let g:investigate_use_dash=1
nnoremap K :call investigate#Investigate()<CR>

" yankstack
if has("gui_macvim")
	set macmeta
end

" }}}

" FileType-specific settings ---------------------- {{{

augroup filetype_python
    autocmd!
    autocmd FileType python setlocal foldmethod=indent
    autocmd FileType python inoremap # X#
augroup END

" When loading text files, wrap them and don't split up words. Automatically
" save new text files.
augroup textfiles
    autocmd!
    autocmd BufNewFile,BufRead *.txt setlocal wrap
    autocmd BufNewFile,BufRead *.txt setlocal lbr
    autocmd BufNewFile *.txt write
    autocmd BufNewFile *.md  write
    autocmd BufNewFile *.mkd write
augroup END

" fix comment auto-indenting for different languages
autocmd FileType matlab inoremap % X%

" javascript folding
au FileType javascript call JavaScriptFold()

augroup web
    autocmd!

    " for CSS, also have things in braces indented:
	autocmd FileType css set smartindent

    " for HTML, generally format text, but if a long line has been created
    " leave it alone when editing:
	autocmd FileType html set formatoptions+=tl

    " for both CSS and HTML, use genuine tab characters for
    " indentation, to make files a few bytes smaller:
	autocmd FileType html,css set noexpandtab tabstop=2

    " closetag
    autocmd FileType html,xml,xsl source ~/.vim/scripts/closetag.vim
    let g:closetag_html_style=1

    " don't wrap html
	autocmd BufWritePre,BufRead *.html setlocal nowrap

    " format XML files
	autocmd FileType xml exe ":silent 1,$!xmllint --format --recover - 2>/dev/null"

augroup END

" haskell
augroup haskell
    autocmd!

    " type inspection
    au FileType haskell nnoremap <buffer> <F1> :HdevtoolsType<CR>
    au FileType haskell nnoremap <buffer> <silent> <F2> :HdevtoolsClear<CR>
    au FileType haskell nnoremap <buffer> <silent> <F3> :HdevtoolsInfo<CR>

    " browse top level definitions
    nmap <leader>T :TagbarToggle<CR>
    let g:tagbar_autofocus = 1

    " typing `gq` converts to pointfree form
    autocmd BufEnter *.hs set formatprg=pointfree

    " Reload
    map <silent> tu :call GHC_BrowseAll()<CR>

    " Type Lookup
    map <silent> tw :call GHC_ShowType(1)<CR>

augroup END

" }}}

" Utilities ---------------------- {{{

" add semicolon to the end of the line
nnoremap  <Leader>j; <Esc>$a;<Esc>j;;
inoremap  <Leader>j; <Esc>$a;<Esc>j;;

" }}}

" Save/Copy/Paste ---------------------- {{{

" to save
noremap <space> :w<CR>
nnoremap <Leader>w :w<CR>
inoremap <Leader>w <ESC>:w<CR>

" copy all
noremap <Leader>co ggvG$y

" edit rest of line
noremap <Leader>cx v$hxa

" pasting
noremap <Leader>p :set paste<CR><c-v><ESC>:set nopaste<CR>
nmap <c-p> <Plug>yankstack_substitute_older_paste

" }}}

" Abbreviations and Typos ---------------------- {{{

" prose typos
iabbrev @@      nirum@stanford.edu
iabbrev adn     and
iabbrev tehn    then
iabbrev waht    what
iabbrev teh     the
iabbrev nriu    niru

" command typos
if has("user_commands")
    command! -bang -nargs=? -complete=file E e<bang> <args>
    command! -bang -nargs=? -complete=file W w<bang> <args>
    command! -bang -nargs=? -complete=file Wq wq<bang> <args>
    command! -bang -nargs=? -complete=file WQ wq<bang> <args>
    command! -bang Wa wa<bang>
    command! -bang WA wa<bang>
    command! -bang Q q<bang>
    command! -bang QA qa<bang>
    command! -bang Qa qa<bang>
endif

" TeX
augroup TeX
    autocmd!
    autocmd FileType tex iabbrev <buffer> alpha   \alpha
    autocmd FileType tex iabbrev <buffer> beta    \beta
    autocmd FileType tex iabbrev <buffer> delta   \delta
    autocmd FileType tex iabbrev <buffer> gamma   \gamma
    autocmd FileType tex iabbrev <buffer> eta     \eta
    autocmd FileType tex iabbrev <buffer> epsilon \epsilon

    " surround with $
    autocmd FileType tex nnoremap 44 i$<Esc>ea$<Esc>
    autocmd FileType tex nnoremap 77 i&<Esc>ea&<Esc>
augroup END

" }}}

" Highlights, colors and themes ---------------------- {{{

" Colorscheme (put this first)
set background=dark
colorscheme atom

" highlight spelling errors
hi clear SpellBad
hi SpellBad guibg=#c62323 term=reverse
noremap <Leader>sp :set spell!<CR>

" highlight the 80th column
set colorcolumn=80
hi ColorColumn guibg=#2b3948

" cursor colors
hi Cursor guifg=cyan guibg=DarkGray
set guicursor=n-c-v:ver100-blinkwait500-blinkon300-blinkoff200-Cursor

" fonts
if has("gui_gtk2")
    set guifont=Ubuntu\ Mono\ derivative\ Powerline\ 14
elseif has("gui_macvim")
    set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types\ Mono:h14
    let g:Powerline_symbols = 'fancy'

    set lines=80
    set columns=150
endif

" }}}

" Generic Mappings ---------------------- {{{

" circular window navigation
nnoremap <tab>   gt
nnoremap <S-tab> gT

" indent lines
vnoremap <tab> I<tab><esc>

" to escape
inoremap jk <Esc>

" qq to record, Q to replay
nnoremap Q @q

" move lines
nnoremap <silent> <C-j> :move+<cr>
nnoremap <silent> <C-k> :move-2<cr>
vnoremap <silent> <C-j> :move '>+1<cr>gv=gv
vnoremap <silent> <C-k> :move '<-2<cr>gv=gv

" indent lines
nnoremap <silent> <C-l> >>
nnoremap <silent> <C-h> <<
vnoremap <silent> <C-l> >gv
vnoremap <silent> <C-h> <gv

" Center search matches when jumping
noremap N Nzz
noremap n nzz

" common terminal commands
noremap <Leader>ls :!ls<CR>

" Emacs-like beginning and end of line.
inoremap <c-e> <c-o>$
inoremap <c-a> <c-o>^

" }}}

" Functions ---------------------- {{{

" change directory to the root of the git repository
function! s:root()
  let me = expand('%:p:h')
  let gitd = finddir('.git', me.';')
  if empty(gitd)
    echo "Not in git repo"
  else
    let gitp = fnamemodify(gitd, ':h')
    echo "Change directory to: ".gitp
    execute 'lcd' gitp
  endif
endfunction
command! Root call s:root()

" }}}
