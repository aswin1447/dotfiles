# use pasteboard wrapper
set-option -g default-command "reattach-to-user-namespace -l zsh"

set-option -g prefix C-s    # set ctrl-s to be the prefix
bind-key C-s last-pane      # binds a key for last window

# act like vim
setw -g mode-keys vi
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+

# Highlight active window
set-window-option -g window-status-current-bg white

# vi key bindings
set-window-option -g mode-keys vi
bind-key -t vi-copy 'v' begin-selection
bind-key -t vi-copy 'y' copy-selection

# tmux-powerline
set-option -g status on
set-option -g status-interval 2
set-option -g status-utf8 on
#set-option -g status-justify "centre"
set-option -g status-left-length 60
set-option -g status-right-length 90
set-option -g status-left "#(~/code/dotfiles/tmux-powerline/powerline.sh left)"
set-option -g status-right "#(~/code/dotfiles/tmux-powerline/powerline.sh right)"

# Automatically set window title
setw -g automatic-rename on

# kill K k
unbind K
bind K "kill-window"
unbind k
bind k confirm-before "kill-window"
unbind X
bind X "kill-pane"

# mouse-select-pane [on | off]
# # #   If on, tmux captures the mouse and when a window is
# # #   split into multiple panes the mouse may be used to
# # #   select the current pane.  The mouse click is also
# # #   passed through to the application as normal.
# # #
set -g mouse-select-pane on

# look good
set -g default-terminal "screen-256color"
